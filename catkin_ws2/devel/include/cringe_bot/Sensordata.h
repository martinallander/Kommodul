// Generated by gencpp from file cringe_bot/Sensordata.msg
// DO NOT EDIT!


#ifndef CRINGE_BOT_MESSAGE_SENSORDATA_H
#define CRINGE_BOT_MESSAGE_SENSORDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cringe_bot
{
template <class ContainerAllocator>
struct Sensordata_
{
  typedef Sensordata_<ContainerAllocator> Type;

  Sensordata_()
    : acc()
    , angle()
    , ir()
    , dist(0.0)  {
      acc.assign(0.0);

      angle.assign(0.0);

      ir.assign(0.0);
  }
  Sensordata_(const ContainerAllocator& _alloc)
    : acc()
    , angle()
    , ir()
    , dist(0.0)  {
  (void)_alloc;
      acc.assign(0.0);

      angle.assign(0.0);

      ir.assign(0.0);
  }



   typedef boost::array<float, 3>  _acc_type;
  _acc_type acc;

   typedef boost::array<float, 3>  _angle_type;
  _angle_type angle;

   typedef boost::array<float, 64>  _ir_type;
  _ir_type ir;

   typedef float _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::cringe_bot::Sensordata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cringe_bot::Sensordata_<ContainerAllocator> const> ConstPtr;

}; // struct Sensordata_

typedef ::cringe_bot::Sensordata_<std::allocator<void> > Sensordata;

typedef boost::shared_ptr< ::cringe_bot::Sensordata > SensordataPtr;
typedef boost::shared_ptr< ::cringe_bot::Sensordata const> SensordataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cringe_bot::Sensordata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cringe_bot::Sensordata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cringe_bot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cringe_bot': ['/home/ubuntu/Kommodul/catkin_ws2/src/cringe_bot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::Sensordata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::Sensordata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::Sensordata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::Sensordata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::Sensordata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::Sensordata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cringe_bot::Sensordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c229e2648232c4169508279d6fdeb33";
  }

  static const char* value(const ::cringe_bot::Sensordata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c229e2648232c41ULL;
  static const uint64_t static_value2 = 0x69508279d6fdeb33ULL;
};

template<class ContainerAllocator>
struct DataType< ::cringe_bot::Sensordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cringe_bot/Sensordata";
  }

  static const char* value(const ::cringe_bot::Sensordata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cringe_bot::Sensordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] acc\n\
float32[3] angle\n\
float32[64] ir\n\
float32 dist\n\
";
  }

  static const char* value(const ::cringe_bot::Sensordata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cringe_bot::Sensordata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc);
      stream.next(m.angle);
      stream.next(m.ir);
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensordata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cringe_bot::Sensordata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cringe_bot::Sensordata_<ContainerAllocator>& v)
  {
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "ir[]" << std::endl;
    for (size_t i = 0; i < v.ir.size(); ++i)
    {
      s << indent << "  ir[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ir[i]);
    }
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRINGE_BOT_MESSAGE_SENSORDATA_H
