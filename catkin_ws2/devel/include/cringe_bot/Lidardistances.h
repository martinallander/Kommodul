// Generated by gencpp from file cringe_bot/Lidardistances.msg
// DO NOT EDIT!


#ifndef CRINGE_BOT_MESSAGE_LIDARDISTANCES_H
#define CRINGE_BOT_MESSAGE_LIDARDISTANCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cringe_bot
{
template <class ContainerAllocator>
struct Lidardistances_
{
  typedef Lidardistances_<ContainerAllocator> Type;

  Lidardistances_()
    : forward(false)
    , backward(false)
    , right(false)
    , left(false)
    , turn_right(false)
    , turn_left(false)
    , distressed(false)
    , minimum()
    , limit(0.0)
    , angle(0)  {
      minimum.assign(0);
  }
  Lidardistances_(const ContainerAllocator& _alloc)
    : forward(false)
    , backward(false)
    , right(false)
    , left(false)
    , turn_right(false)
    , turn_left(false)
    , distressed(false)
    , minimum()
    , limit(0.0)
    , angle(0)  {
  (void)_alloc;
      minimum.assign(0);
  }



   typedef uint8_t _forward_type;
  _forward_type forward;

   typedef uint8_t _backward_type;
  _backward_type backward;

   typedef uint8_t _right_type;
  _right_type right;

   typedef uint8_t _left_type;
  _left_type left;

   typedef uint8_t _turn_right_type;
  _turn_right_type turn_right;

   typedef uint8_t _turn_left_type;
  _turn_left_type turn_left;

   typedef uint8_t _distressed_type;
  _distressed_type distressed;

   typedef boost::array<int16_t, 360>  _minimum_type;
  _minimum_type minimum;

   typedef float _limit_type;
  _limit_type limit;

   typedef int16_t _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::cringe_bot::Lidardistances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cringe_bot::Lidardistances_<ContainerAllocator> const> ConstPtr;

}; // struct Lidardistances_

typedef ::cringe_bot::Lidardistances_<std::allocator<void> > Lidardistances;

typedef boost::shared_ptr< ::cringe_bot::Lidardistances > LidardistancesPtr;
typedef boost::shared_ptr< ::cringe_bot::Lidardistances const> LidardistancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cringe_bot::Lidardistances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cringe_bot::Lidardistances_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cringe_bot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cringe_bot': ['/home/ubuntu/Kommodul/catkin_ws2/src/cringe_bot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::Lidardistances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::Lidardistances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::Lidardistances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::Lidardistances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::Lidardistances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::Lidardistances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cringe_bot::Lidardistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bf1b94a213c6e33b539f2122a78cb26";
  }

  static const char* value(const ::cringe_bot::Lidardistances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bf1b94a213c6e33ULL;
  static const uint64_t static_value2 = 0xb539f2122a78cb26ULL;
};

template<class ContainerAllocator>
struct DataType< ::cringe_bot::Lidardistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cringe_bot/Lidardistances";
  }

  static const char* value(const ::cringe_bot::Lidardistances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cringe_bot::Lidardistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool forward\n\
bool backward\n\
bool right\n\
bool left\n\
bool turn_right\n\
bool turn_left\n\
bool distressed\n\
int16[360] minimum\n\
float32 limit\n\
int16 angle\n\
";
  }

  static const char* value(const ::cringe_bot::Lidardistances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cringe_bot::Lidardistances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forward);
      stream.next(m.backward);
      stream.next(m.right);
      stream.next(m.left);
      stream.next(m.turn_right);
      stream.next(m.turn_left);
      stream.next(m.distressed);
      stream.next(m.minimum);
      stream.next(m.limit);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lidardistances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cringe_bot::Lidardistances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cringe_bot::Lidardistances_<ContainerAllocator>& v)
  {
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "backward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.backward);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "turn_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_right);
    s << indent << "turn_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_left);
    s << indent << "distressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.distressed);
    s << indent << "minimum[]" << std::endl;
    for (size_t i = 0; i < v.minimum.size(); ++i)
    {
      s << indent << "  minimum[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.minimum[i]);
    }
    s << indent << "limit: ";
    Printer<float>::stream(s, indent + "  ", v.limit);
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRINGE_BOT_MESSAGE_LIDARDISTANCES_H
