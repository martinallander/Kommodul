// Generated by gencpp from file cringe_bot/IRdata.msg
// DO NOT EDIT!


#ifndef CRINGE_BOT_MESSAGE_IRDATA_H
#define CRINGE_BOT_MESSAGE_IRDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cringe_bot
{
template <class ContainerAllocator>
struct IRdata_
{
  typedef IRdata_<ContainerAllocator> Type;

  IRdata_()
    : dist(0.0)
    , has_forward(false)
    , ir_forward()
    , has_right(false)
    , ir_right()  {
      ir_forward.assign(0);

      ir_right.assign(0);
  }
  IRdata_(const ContainerAllocator& _alloc)
    : dist(0.0)
    , has_forward(false)
    , ir_forward()
    , has_right(false)
    , ir_right()  {
  (void)_alloc;
      ir_forward.assign(0);

      ir_right.assign(0);
  }



   typedef float _dist_type;
  _dist_type dist;

   typedef uint8_t _has_forward_type;
  _has_forward_type has_forward;

   typedef boost::array<int16_t, 64>  _ir_forward_type;
  _ir_forward_type ir_forward;

   typedef uint8_t _has_right_type;
  _has_right_type has_right;

   typedef boost::array<int16_t, 64>  _ir_right_type;
  _ir_right_type ir_right;





  typedef boost::shared_ptr< ::cringe_bot::IRdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cringe_bot::IRdata_<ContainerAllocator> const> ConstPtr;

}; // struct IRdata_

typedef ::cringe_bot::IRdata_<std::allocator<void> > IRdata;

typedef boost::shared_ptr< ::cringe_bot::IRdata > IRdataPtr;
typedef boost::shared_ptr< ::cringe_bot::IRdata const> IRdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cringe_bot::IRdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cringe_bot::IRdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cringe_bot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cringe_bot': ['/home/ubuntu/Kommodul/catkin_ws2/src/cringe_bot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::IRdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cringe_bot::IRdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::IRdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cringe_bot::IRdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::IRdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cringe_bot::IRdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cringe_bot::IRdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb41efdfb7055f64a4f92993c2b04d80";
  }

  static const char* value(const ::cringe_bot::IRdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb41efdfb7055f64ULL;
  static const uint64_t static_value2 = 0xa4f92993c2b04d80ULL;
};

template<class ContainerAllocator>
struct DataType< ::cringe_bot::IRdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cringe_bot/IRdata";
  }

  static const char* value(const ::cringe_bot::IRdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cringe_bot::IRdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dist\n\
bool has_forward\n\
int16[64] ir_forward\n\
bool has_right\n\
int16[64] ir_right\n\
";
  }

  static const char* value(const ::cringe_bot::IRdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cringe_bot::IRdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist);
      stream.next(m.has_forward);
      stream.next(m.ir_forward);
      stream.next(m.has_right);
      stream.next(m.ir_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IRdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cringe_bot::IRdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cringe_bot::IRdata_<ContainerAllocator>& v)
  {
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    s << indent << "has_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_forward);
    s << indent << "ir_forward[]" << std::endl;
    for (size_t i = 0; i < v.ir_forward.size(); ++i)
    {
      s << indent << "  ir_forward[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ir_forward[i]);
    }
    s << indent << "has_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_right);
    s << indent << "ir_right[]" << std::endl;
    for (size_t i = 0; i < v.ir_right.size(); ++i)
    {
      s << indent << "  ir_right[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ir_right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRINGE_BOT_MESSAGE_IRDATA_H
